#include "gameWindow.h"
#include<QApplication>
#include<QPainter>
#include<QIcon>

gameWindow::gameWindow():
    LiftButton("向左",this),
    RightButton("向右",this),
    UpButton("向上",this),
    DownButton("向下",this),
    Paint(10,10,1500,1000),
    Paint1(1520,680,390,270),
    Alloffset(0,0),
    label("100%",this)
{
    ratio= 1.00;             //初始化图片缩放比例
    action = gameWindow::None;
    pixW = 3238;            //设置图片尺寸
    pixH = 2248;


    pix = new QPixmap;
    pix->load("../image/map");
    QPainter p(pix);
    p.drawPixmap(1046,980,QPixmap("../image/cute"));

    pixx = new QPixmap;
    pixx->load("../image/map1");
    QPainter p1(pixx);
    p1.drawPixmap(126,118,QPixmap("../image/cute1"));  //8.3,8.3



    LiftButton.setGeometry(1730,10,60,25);
    connect(&LiftButton,SIGNAL(clicked()),this,SLOT(OnLiftClicked()));
    RightButton.setGeometry(1730,40,60,25);
    connect(&RightButton,SIGNAL(clicked()),this,SLOT(OnRightClicked()));
    UpButton.setGeometry(1730,70,60,25);
    connect(&UpButton,SIGNAL(clicked()),this,SLOT(onUpClicked()));
    DownButton.setGeometry(1730,100,60,25);
    connect(&DownButton,SIGNAL(clicked()),this,SLOT(onDownClicked()));
    label.move(1740,130);
    resize(1820,1500);    //调节gameWindow（总窗口）大小

}


bool gameWindow::event(QEvent * event)
{
    static bool press=false;
    static QPoint PreDot;

    if(event->type() == QEvent::MouseButtonPress )
    {
           QMouseEvent *mouse = dynamic_cast<QMouseEvent* >(event);

           //判断鼠标是否是左键按下,且鼠标位置是否在绘画区域
           if(mouse->button()==Qt::LeftButton &&Paint.contains(mouse->pos()))
           {
               press=true;
               QApplication::setOverrideCursor(Qt::OpenHandCursor); //设置鼠标样式

               PreDot = mouse->pos();
           }

    }
else if(event->type() == QEvent::MouseButtonRelease)
{
    QMouseEvent *mouse = dynamic_cast<QMouseEvent* >(event);

    //判断鼠标是否是左键释放,且之前是在绘画区域
    if(mouse->button()==Qt::LeftButton && press )
    {
        QApplication::setOverrideCursor(Qt::ArrowCursor); //改回鼠标样式
        press=false;
    }
}

 if(event->type() == QEvent::MouseMove)              //移动图片
 {
      if(press)
     {
        QMouseEvent *mouse = dynamic_cast<QMouseEvent* >(event);

        offset.setX(mouse->x() - PreDot.x());
        offset.setY(mouse->y() - PreDot.y());
        PreDot = mouse->pos();
        action = gameWindow::Move;
        this->update();
     }
 }
return QWidget::event(event);
}

void gameWindow::paintEvent(QPaintEvent *event)
{
   QPainter painter(this);
  int NowW = ratio *pixW;
  int NowH = ratio *pixH;

if(action==gameWindow::Move)                    //移动
{
    int offsetx=Alloffset.x()+offset.x();
    Alloffset.setX(offsetx);

    int offsety=Alloffset.y()+offset.y();
    Alloffset.setY(offsety);
    action=gameWindow::None;
}

if(abs(Alloffset.x())>=(Paint.width()/2 + NowW/2 -10))    //限制X偏移值
{
    if(Alloffset.x()>0)
        Alloffset.setX(Paint.width()/2 + NowW/2 -10);
    else
     Alloffset.setX(-Paint.width()/2 + -NowW/2 +10);
}
if(abs(Alloffset.y())>=(Paint.height()/2 + NowH/2 -10))    //限制Y偏移值
{
    if(Alloffset.y()>0)
        Alloffset.setY(Paint.height()/2 + NowH/2 -10);
    else
     Alloffset.setY(-Paint.height()/2 + -NowH/2 +10);

}

int x = Paint.width()/2 + Alloffset.x() -NowW/2;
if(x<0)
    x=0;

int y = Paint.height()/2 + Alloffset.y() -NowH/2;
if(y<0)
    y=0;

int  sx = NowW/2 - Paint.width()/2 - Alloffset.x();
if(sx<0)
    sx=0;

int  sy = NowH/2 - Paint.height()/2 - Alloffset.y();
if(sy<0)
    sy=0;

int w =(NowW - sx)>Paint.width()? Paint.width() : (NowW - sx);
if(w>(Paint.width()-x))
    w = Paint.width()-x;

int h =(NowH - sy)>Paint.height()? Paint.height() : (NowH - sy);
if(h>(Paint.height()-y))
    h = Paint.height()-y;

  painter.drawRect(Paint.x()-1,Paint.y()-1,Paint.width()+1,Paint.height()+1); //画框
  painter.drawTiledPixmap(x+Paint.x(),y+Paint.y(),w,h,*pix,sx,sy); //绘画图形

  painter.drawRect(Paint1.x()-1,Paint1.y()-1,Paint1.width()+1,Paint1.height()+1); //画框
  painter.drawTiledPixmap(Paint1.x(),Paint1.y(),Paint1.width(),Paint1.height(),*pixx,0,0); //绘画图形
}

void gameWindow::onUpClicked()
{
  action=gameWindow::Move;
  offset.setX(0);
  offset.setY(-20);

  this->update();
}
void gameWindow::onDownClicked()
{
  action=gameWindow::Move;
  offset.setX(0);
  offset.setY(20);
  this->update();
}
void gameWindow::OnLiftClicked()
{
  action=gameWindow::Move;
  offset.setX(-20);
  offset.setY(0);

  this->update();
}
void gameWindow::OnRightClicked()
{
  action=gameWindow::Move;
  offset.setX(20) ;
  offset.setY(0) ;

  this->update();
}


